const companyAuthCRUD = require('../../Models/wpsAdmin/company')
const userAuthCRUD = require('../../Models/wpsAdmin/user')
const privilegeAuthCRUD = require('../../Models/wpsAdmin/privilege')
const Constant = require('../../MiddleWares/lib/constants')
const bcrypt = require('bcrypt')
const CommonFunction = require('../../MiddleWares/commonFunctions')
const { compareSync } = require('bcrypt')



/* Company Login */
exports.CompanyLogin = async (req, res) => {
    try {
        const { email, password } = req.body

        const companyData = await companyAuthCRUD.findOne({ email })
        var user = await userAuthCRUD.findOne({ email })
        const company = (companyData != null) ? companyData : user
        const privilegeData = await privilegeAuthCRUD.findById({ _id: company.privilege })

        if (!company) {
            return res.globalResponse(false, '', Constant.EMAIL_INCORRECT)
        } else if (!compareSync(password, company.password)) {
            return res.globalResponse(false, '', Constant.PASSWORD_INCORRECT)
        } else {
            const payload = {
                company: {
                    id: company._id,
                    email: company.email,
                    companyId: company.companyId,
                    privilegeId: company.privilege,
                    privilegeOptions: privilegeData.access
                }
            }
            const Token = await CommonFunction.TokenGenerateFunction(payload)
            return res.globalResponse(true, Token, payload.company.privilegeOptions)
        }
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/* Company List */
exports.companyList = async (req, res) => {
    try {
        let msg = ''
        const _id = req.company.id
        const ListAccess = await CommonFunction.addPermission(_id, Constant.ACCESS_MODULE)
        console.log("ListAccess", ListAccess)
        if (!ListAccess) {
            msg = Constant.PERMISSION_DENIED
        } else if (ListAccess.error) {
            msg = ListAccess.error
        } else {
            const list = await companyAuthCRUD.find({}, { password: 0, confPassword: 0 })
            msg = list
        }
        return res.globalResponse(true, msg)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}
// exports.companyList = async (req, res) => {
//     try {
//         const _id = req.company.id
//         let msg = ''
//         const Subscription = await CommonFunction.checkSubscription(_id)
//         console.log(Subscription)
//         if (!Subscription.msg) {
//             const list = await companyAuthCRUD.find({}, { password: 0, confPassword: 0 })
//             msg = list
//         } else {
//             msg = Subscription.msg
//         }
//         return res.globalResponse(true, msg)
//     } catch (error) {
//         return res.globalResponse(false, error.message)
//     }
// }

/* Push Notiification Before 2 Days Expire Subscription */
exports.notificationPush = async (req, res) => {
    try {
        const _id = req.company.id
        let msg = ''
        const Before2Days = await CommonFunction.pushNotification(_id)
        console.log(111, Before2Days)
        if (Before2Days.msg) {
            msg = Before2Days.msg
        } else {
            msg = `You have Subscription`
        }
        return res.globalResponse(true, msg)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/* Subscription Expire Counter Api */
exports.expireCounter = async (req, res) => {
    try {
        let _id = req.company.id;
        const currentDate = new Date()
        const companyData = await companyAuthCRUD.findById({ _id })
        const expiryDate = companyData.subscription_expiry_date
        const diffTime = Math.abs(Number(expiryDate) - Number(currentDate));   //Calculate the milliseconds between the two dates
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24) - 1);               //Calculate the days between the two dates and -1 is use for subtract one day
        return res.globalResponse(true, `${diffDays} days`)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/* Company Filter Api */
exports.companyFilter = async (req, res) => {
    try {
        let status = req.body.status;
        const filterData = await companyAuthCRUD.aggregate([
            {
                $match: { status: { $regex: `${status}`, $options: 'i' } }
            }
        ])
        return res.globalResponse(true, filterData)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/* ChangePassword */
exports.ChangePassword = async (req, res) => {
    try {
        const _id = req.company.id
        const { existingPassword, NewPassword, ConfPassword } = req.body

        const findCompanyData = await companyAuthCRUD.findById({ _id })
        const findUserData = await userAuthCRUD.findById({ _id })
        const findUser = (findCompanyData != null) ? findCompanyData : findUserData
        const Model = (findUser.role == 'company') ? companyAuthCRUD : userAuthCRUD

        if (compareSync(existingPassword, findUser.password)) {
            if (NewPassword == ConfPassword) {
                const PasswordSave = await CommonFunction.changePasswordFunction(NewPassword, Model, _id)
                return res.globalResponse(true, PasswordSave)
            } else {
                return res.globalResponse(false, Constant.PASSWORD_NOT_SAME)
            }
        } else {
            return res.globalResponse(false, Constant.PASSWORD_INCORRECT)
        }
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/*---------------------------------- Forget Password Module Start ---------------------------------*/

/* Forget Password Mobile Verify */
exports.findMobileNumber = async (req, res) => {
    try {
        let GENOTP = 0
        let OTPGEN = 0
        const mobile_number = req.body.number

        const findCompanyData = await companyAuthCRUD.findOne({ mobile_number })
        const findUserData = await userAuthCRUD.findOne({ mobile_number })
        const findData = (findCompanyData != null) ? findCompanyData : findUserData

        if (findData) {
            const Model = (findData.role == 'company') ? companyAuthCRUD : userAuthCRUD
            // GENOTP = (Math.floor(100000 + Math.random() * 999999))
            OTPGEN = (Math.floor(Math.random() * 999999))
            OTPGEN.toString().length == 5 ? GENOTP = parseInt(OTPGEN + "0") : GENOTP = OTPGEN
            const dataUpdate = await Model.findByIdAndUpdate({ _id: findData._id }, { otp: GENOTP })
        } else if (!findData) {
            GENOTP = Constant.MOBILE_NUMBER_NOT_VALID
        }
        return res.globalResponse(true, GENOTP)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/* Forget Password OTP Verify */
exports.otpVerify = async (req, res) => {
    try {
        let msg = ''
        const { number, otp } = req.body

        const findNumber = await companyAuthCRUD.findOne({ mobile_number: number })
        var user = await userAuthCRUD.findOne({ mobile_number: number })
        const company = (findNumber != null) ? findNumber : user

        if (company) {
            if (company.otp == otp) {
                msg = Constant.OTP_CORRECT
            } else {
                msg = Constant.OTP_INCORRECT
            }
        }
        return res.globalResponse(true, msg)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/* Forget Password */
exports.forgetPassword = async (req, res) => {
    try {
        let msg = ''
        const { number, otp, NewPassword, ConfPassword } = req.body

        const findCompanyData = await companyAuthCRUD.findOne({ mobile_number: number })
        const findUserData = await userAuthCRUD.findOne({ mobile_number: number })
        const findNumber = (findCompanyData != null) ? findCompanyData : findUserData
        const Model = (findNumber.role == 'company') ? companyAuthCRUD : userAuthCRUD

        if (findNumber) {
            if (findNumber.otp == otp) {
                if (NewPassword == ConfPassword) {
                    msg = await CommonFunction.forgetPasswordFunction(NewPassword, Model, number)
                } else {
                    msg = Constant.PASSWORD_NOT_SAME
                }
            } else {
                msg = Constant.OTP_INCORRECT
            }
        }
        return res.globalResponse(true, msg)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}

/*---------------------------------- Forget Password Module End ---------------------------------*/

/* Upload Profile Photo */
exports.profilePhoto = async (req, res) => {
    try {
        const _id = req.company.id

        const findCompany = await companyAuthCRUD.findById({ _id })
        const findUser = await userAuthCRUD.findById({ _id })
        const findNumber = (findCompany != null) ? findCompany : findUser
        const Model = (findNumber.role == 'company') ? companyAuthCRUD : userAuthCRUD

        const addImage = await Model.findByIdAndUpdate({ _id }, {
            image: `http://localhost:3000/${req.file.path.replace(/\\/g, '/')}`
        })
        return res.globalResponse(true, Constant.UPDATE_MSG)
    } catch (error) {
        return res.globalResponse(false, error.message)
    }
}